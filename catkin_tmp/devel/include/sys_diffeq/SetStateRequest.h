// Generated by gencpp from file sys_diffeq/SetStateRequest.msg
// DO NOT EDIT!


#ifndef SYS_DIFFEQ_MESSAGE_SETSTATEREQUEST_H
#define SYS_DIFFEQ_MESSAGE_SETSTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sys_diffeq
{
template <class ContainerAllocator>
struct SetStateRequest_
{
  typedef SetStateRequest_<ContainerAllocator> Type;

  SetStateRequest_()
    : x_new(0.0)  {
    }
  SetStateRequest_(const ContainerAllocator& _alloc)
    : x_new(0.0)  {
    }



   typedef float _x_new_type;
  _x_new_type x_new;




  typedef boost::shared_ptr< ::sys_diffeq::SetStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sys_diffeq::SetStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetStateRequest_

typedef ::sys_diffeq::SetStateRequest_<std::allocator<void> > SetStateRequest;

typedef boost::shared_ptr< ::sys_diffeq::SetStateRequest > SetStateRequestPtr;
typedef boost::shared_ptr< ::sys_diffeq::SetStateRequest const> SetStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sys_diffeq::SetStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sys_diffeq

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sys_diffeq': ['/home/smladmin/catkin_tmp/src/sys_diffeq/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sys_diffeq::SetStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sys_diffeq::SetStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sys_diffeq::SetStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "475a6e7e72ec2ed98f93b05a4e8bb2ab";
  }

  static const char* value(const ::sys_diffeq::SetStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x475a6e7e72ec2ed9ULL;
  static const uint64_t static_value2 = 0x8f93b05a4e8bb2abULL;
};

template<class ContainerAllocator>
struct DataType< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sys_diffeq/SetStateRequest";
  }

  static const char* value(const ::sys_diffeq::SetStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_new\n\
";
  }

  static const char* value(const ::sys_diffeq::SetStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_new);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct SetStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sys_diffeq::SetStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sys_diffeq::SetStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_new: ";
    Printer<float>::stream(s, indent + "  ", v.x_new);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYS_DIFFEQ_MESSAGE_SETSTATEREQUEST_H
